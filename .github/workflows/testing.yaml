name: Demo Testing

on:
  push:
  pull_request:    
  workflow_call:
    inputs:
      tag:
        type: string
        required: true
        description: Kantra tag to test
  workflow_dispatch:
    inputs:
      tag:
        type: string
        required: true
        description: Kantra tag to test

jobs:
  # run tests by building a specific commit from a PR or a branch
  test-branch:
    name: Build & test from commit
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Extract pull request number from inputs or PR description
        run: |
          echo "${{ github.event.pull_request.body }}"
          PULL_REQUEST_NUMBER=$(echo "${{ github.event.pull_request.body }}" | grep -oP 'Analyzer PR: \K\d+' || true)
          if [ -z "$PULL_REQUEST_NUMBER" ]; then
            echo "ANALYZER_REF=main" >>$GITHUB_ENV
          else
            echo "ANALYZER_REF=refs/pull/$PULL_REQUEST_NUMBER/merge" >>$GITHUB_ENV
          fi
      
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: konveyor/analyzer-lsp
          ref: "${{ env.ANALYZER_REF}}"
          path: analyzer-lsp
     
      - name: Build analyzer image
        working-directory: analyzer-lsp
        run: |
          podman build -t quay.io/konveyor/analyzer-lsp:latest .

      - uses: actions/checkout@v3
      
      - name: Build image and binary
        run: |
          podman build -t localhost/kantra:latest -f Dockerfile .
          go build -o kantra main.go
      
      - name: Run unit tests
        run: |
          RUNNER_IMG=localhost/kantra:latest go test ./...
          RUNNER_IMG=localhost/kantra:latest go run github.com/onsi/ginkgo/v2/ginkgo -r --randomize-all --randomize-suites --fail-on-pending --keep-going

      - name: Fetch sample applications
        run: |
          git clone https://github.com/konveyor/example-applications
          git clone https://github.com/ivargrimstad/jakartaee-duke

      - name: Run analysis test and copy output
        run: |
          RUNNER_IMG=localhost/kantra:latest ./kantra analyze --input $(pwd)/example-applications/example-1/ --output ./output/ --rules ./test-data/jni-native-code-test.windup.xml --target cloud-readiness --run-local=false
      
      # TODO (pgaikwad): Change this to a yaml test and run `kantra test`
      - name: Fail if analysis output does not match expected
        run: |
          expected_file=./test-data/analysis-output.yaml
          actual_file=./output/output.yaml
          function filter_and_sort() {
            yq e 'del(.[].skipped) | del(.[].unmatched)' $1 \
              | yq e '.[]?.violations |= (. | to_entries | sort_by(.key) | from_entries)' \
              | yq e '.[]?.violations[]?.incidents |= sort_by(.uri)' \
              | yq e '.[] | (.tags // []) |= sort'
          }
          filter_and_sort $expected_file > $expected_file
          filter_and_sort $actual_file > $actual_file
          diff $expected_file $actual_file

      - name: Fail if dependencies output does not match expected
        run: |
          expected_file=./test-data/deps-output.yaml
          actual_file=./output/dependencies.yaml
          sed 's/^[ \t-]*//' $expected_file | sort -s > /tmp/expected_file
          sed 's/^[ \t-]*//' $actual_file | sort -s > /tmp/actual_file
          diff /tmp/expected_file /tmp/actual_file || diff $expected_file $actual_file

  # run tests using conainer image / binary already published to quay
  test-published:
    name: Build & test with published images
    if: github.event_name != 'push' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.tag == 'latest' && 'main' || inputs.tag }}
      
      - name: download kantra and run test
        run: |
          git clone https://github.com/konveyor/example-applications
          podman cp $(podman create --name kantra-download quay.io/konveyor/kantra:${{ inputs.tag }}):/usr/local/bin/kantra .
          podman rm kantra-download
          ./kantra analyze --input $(pwd)/example-applications/example-1/ \
            --output ./output/ --target cloud-readiness \
            --rules ./test-data/jni-native-code-test.windup.xml

      - name: fail if analysis output doesn't match expected
        run: |
          expected_file=./test-data/analysis-output.yaml
          actual_file=./output/output.yaml
          function filter_and_sort() {
            yq e 'del(.[].skipped) | del(.[].unmatched)' $1 \
              | yq e '.[]?.violations |= (. | to_entries | sort_by(.key) | from_entries)' \
              | yq e '.[]?.violations[]?.incidents |= sort_by(.uri)' \
              | yq e '.[] | (.tags // []) |= sort'
          }
          filter_and_sort $expected_file > $expected_file
          filter_and_sort $actual_file > $actual_file
          diff $expected_file $actual_file

      - name: fail if deps output doesn't match expected
        run: |
          expected_file=./test-data/deps-output.yaml
          actual_file=./output/dependencies.yaml
          sed 's/^[ \t-]*//' $expected_file | sort -s > /tmp/expected_file
          sed 's/^[ \t-]*//' $actual_file | sort -s > /tmp/actual_file
          diff /tmp/expected_file /tmp/actual_file || diff $expected_file $actual_file
